/******* Do not edit this file *******
Simple Custom CSS and JS - by Silkypress.com
Saved: Jul 03 2025 | 06:59:32 */
document.addEventListener("DOMContentLoaded", function () {
//     if (window.location.href.includes("https://milroyg.github.io/dfes/wordpress/disaster-management/disaster-response-plan/"))
	if (document.getElementById("dmrpmap")) {

        var map = L.map("dmrpmap").setView([15.4271947, 73.9293256], 10.5);

        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution: "© OpenStreetMap contributors",
        }).addTo(map);

        function dmsToDecimal(dms) {
            dms = dms.replace(/�/g, "°").replace(/˚/g, "°");
            let regex = /(\d+)°\s*(\d+)'?\s*(\d+(?:\.\d+)?)"?\s*([NSEW])/;
            let match = dms.match(regex);

            if (!match) {
                console.error("Invalid DMS format:", dms);
                return null;
            }

            let degrees = parseFloat(match[1]);
            let minutes = parseFloat(match[2]);
            let seconds = parseFloat(match[3]);
            let direction = match[4];

            let decimal = degrees + minutes / 60 + seconds / 3600;
            if (direction === "S" || direction === "W") decimal = -decimal;

            return decimal;
        }

        // Define custom icons for markers AND filter panel
        var icons = {
            "Apada Mitra": "/wp-content/uploads/markers/Apada%20Mitra.png",
            "Apada Sakhi": "/wp-content/uploads/markers/Apada%20Sakhi.png",
            "Fire Station": "/wp-content/uploads/markers/Fire%20Station.png",
            "Fire Hydrant": "/wp-content/uploads/markers/Fire%20Hydrant.png",
            "Ground Level Reservoir": "/wp-content/uploads/markers/Ground%20Level%20Reservoir.png",
            "Overhead Reservoir": "/wp-content/uploads/markers/Overhead%20Reservoir.png",
            "Open Water Source": "/wp-content/uploads/markers/Open%20Water%20Source.png",
            "Mutual Aid Agency": "/wp-content/uploads/markers/Mutual%20Aid%20Agency.png",
            "Major Hazardous Unit": "/wp-content/uploads/markers/Major%20Hazardous%20Unit.png",
            "Cyclone Shelter": "/wp-content/uploads/markers/Cyclone%20Shelter.png",
            "Default": "https://cdn-icons-png.flaticon.com/512/854/854878.png"
        };

        let markers = [];
        let categoryCounts = {};
        let waterResources = ["Fire Hydrant", "Ground Level Reservoir", "Overhead Reservoir", "Open Water Source"];

         fetch("/wp-content/uploads/DMRP_Items.csv")
            .then((response) => response.text())
            .then((csvText) => {
                let rows = csvText.split("\n");
                
                // Extract headers for the marker titles
                let headers = rows[0].split(",").map(h => h.trim());

                rows.slice(1).forEach((row) => {
                    let cols = row.split(",").map(col => col.trim());
                    if (cols.length < 6) return;

                    let type = cols[0];
                    let category = cols[2];

                    // Group subcategories under "Water Resources"
                    if (waterResources.includes(category)) {
                        category = `Water Resources > ${category}`;
                    }

                    categoryCounts[category] = (categoryCounts[category] || 0) + 1;

                    // Use the header name as the marker title
                    let name = `Name: ${cols[3]}`;

                    let latDMS = cols[cols.length - 2].replace(/"/g, "").replace(/�/g, "°");
                    let lonDMS = cols[cols.length - 1].replace(/"/g, "").replace(/�/g, "°");

                    let latitude = dmsToDecimal(latDMS);
                    let longitude = dmsToDecimal(lonDMS);

                    if (!isNaN(latitude) && !isNaN(longitude)) {
                        let markerIcon = L.icon({
                            iconUrl: icons[cols[2]] || icons["Default"],
                            iconSize: [30, 30],
                            iconAnchor: [15, 30],
                            popupAnchor: [0, -30]
                        });

                        let marker = L.marker([latitude, longitude], { icon: markerIcon })
                            .addTo(map)
                         marker.bindPopup(`
  <div style="font-size: 10px; color: #000;  font-weight: bold; ">Category: ${category}</div>
    <div style="font-size: 10px;color: #000;">${name}</div>
  
`);


                        marker.category = category;
                        markers.push(marker);
                    }
                });

                createFilterControls(categoryCounts);
            });
       // Create the filter controls with collapsible Water Resources section and icons
function createFilterControls(categoryCounts) {
    const filterContainer = document.getElementById("filter-controls");
    filterContainer.innerHTML = "";

    // Create Water Resources section with collapsible subcategories
    let waterResourcesHTML = `
        <details open>
           <summary> <strong>Water Resources (${waterResources.reduce((acc, sub) => acc + (categoryCounts[`Water Resources > ${sub}`] || 0), 0)}) </strong></summary>
            <ul style="list-style: none; padding-left: 20px;">`;

    Object.entries(categoryCounts).forEach(([category, count]) => {
        const iconUrl = icons[category.split("> ").pop()] || icons["Default"];

        if (category.startsWith("Water Resources >")) {
            waterResourcesHTML += `
                <li>
                    <label style="display: inline-flex; align-items: center; color:#000;">
                        <input type="checkbox" value="${category}" checked style="margin-right: 8px;">
                        <img src="${iconUrl}" alt="${category}" style="width: 20px; height: 20px; margin-right: 8px;">
                        ${category.split("> ")[1]} (${count})
                    </label>
                </li>`;
        } else {
            filterContainer.innerHTML += `
                <label style="display: inline-flex; align-items: center; margin-bottom: 8px;color:#000;">
                    <input type="checkbox" value="${category}" checked style="margin-right: 8px;">
                    <img src="${iconUrl}" alt="${category}" style="width: 20px; height: 20px; margin-right: 8px;">
                    ${category} (${count})
                </label><br>`;
        }
    });

    waterResourcesHTML += `</ul></details>`;
    filterContainer.innerHTML += waterResourcesHTML;

    // Button handlers
    document.getElementById("apply-filter").onclick = filterMarkers;

    document.getElementById("select-none").onclick = () => {
        document.querySelectorAll("#filter-controls input").forEach(cb => cb.checked = false);
		
    };
	
}

        function filterMarkers() {
            let checkedCategories = Array.from(document.querySelectorAll("#filter-controls input:checked"))
                .map(cb => cb.value);

            markers.forEach(marker => {
                if (checkedCategories.includes(marker.category)) {
                    map.addLayer(marker);
                } else {
                    map.removeLayer(marker);
                }
            });
        }
    }
});
