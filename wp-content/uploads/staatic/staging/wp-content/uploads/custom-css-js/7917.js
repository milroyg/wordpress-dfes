/******* Do not edit this file *******
Simple Custom CSS and JS - by Silkypress.com
Saved: Jul 03 2025 | 07:01:01 */
document.addEventListener("DOMContentLoaded", async function () {
	
		const path = window.location.pathname;
		const lang = document.documentElement.lang;
		
		 if (document.body.classList.contains("page-id-9616") || document.body.classList.contains("page-id-9625")) {
  const map = L.map("map", {
    center: [15.4909,73.8278], // Initial center of the map
    zoom: 11,             // Initial zoom level
    minZoom: 9,          // Minimum zoom level
    maxZoom: 13,          // Maximum zoom level
  });

 
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: 'Map data © <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
  }).addTo(map);


  //Create a marker cluster group
  const markers = L.markerClusterGroup({
    maxClusterRadius: 50,
    disableClusteringAtZoom: 11,
  });

  // Function to get a custom icon based on call type
  function getMarkerIcon(callType) {
    const iconUrls = {
      "Fire related": "/wp-content/uploads/markers/marker_fire.svg",
      "Emergency/ Accidents": "/wp-content/uploads/markers/marker_emergency.svg",
      "Meteorological": "/wp-content/uploads/markers/marker_meteorological.svg",
      "Biological": "/wp-content/uploads/markers/marker_biological.svg",
      "Climatological": "/wp-content/uploads/markers/marker_climatological.svg",
      "Hydrological": "/wp-content/uploads/markers/marker_hydrological.svg",
      "Geophysical": "/wp-content/uploads/markers/marker_geophysical.svg",
      "Others": "/wp-content/uploads/markers/marker-other.svg",
    };

    const iconUrl = iconUrls[callType] || "https://example.com/default-icon.png";
    return L.icon({
      iconUrl: iconUrl,
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32],
	
    });
  }

  // Function to scatter markers in a circular pattern
   // Function to calculate triangular offset
  function adjustGeoPoint(lat, lon, index, offsetDistance = 0.005) {
    const offsetAngle = (Math.PI / 3) * index; // 120 degrees (π/3 radians) per index
    const latOffset = offsetDistance * Math.cos(offsetAngle);
    const lonOffset = offsetDistance * Math.sin(offsetAngle);
    return {
      adjustedLat: lat + latOffset,
      adjustedLon: lon + lonOffset,
    };
  }

  try {
    // Fetch village data
    const villageResponse = await fetch("/wp-content/uploads/revenue_villages.json");
    const villageData = await villageResponse.json();
	 

    // Create a map of village coordinates
    const villageCoordinates = {};
    villageData.forEach((village) => {
      const [lon, lat] = village.wkt.replace("POINT(", "").replace(")", "").split(" ");
      villageCoordinates[village.village.trim().toLowerCase()] = {
        lat: parseFloat(lat),
        lon: parseFloat(lon),
      };
    });

    // Fetch live call data
    const callResponse = await fetch("https://dfes.goa.gov.in/disaster-management/live-calls/data");
    const callData = await callResponse.json();

    // Track marker counts for each village
    const markerCount = {};

    // Add markers to the cluster group
    callData.forEach((call) => {
      const villageName = call.village ? call.village.trim().toLowerCase() : "";

      if (villageCoordinates[villageName]) {
        const { lat, lon } = villageCoordinates[villageName];

        // Increment marker count for the village
        markerCount[villageName] = (markerCount[villageName] || 0) + 1;

        // Adjust the marker position based on count to scatter
        const { adjustedLat, adjustedLon } = adjustGeoPoint(
          lat,
          lon,
          markerCount[villageName]
        );

        // Get the custom icon based on call type
        const markerIcon = getMarkerIcon(call.type);

        // Create a marker and add it to the cluster group
        const marker = L.marker([adjustedLat, adjustedLon], { icon: markerIcon })
          .bindPopup(`
            <strong>${call.station}</strong><br>
            Desc: ${call.description || "Details unavailable"}<br>
            Near: ${call.near}<br>
            Village: ${call.village}<br>
            Time: ${call.outtime}
          `);
        markers.addLayer(marker);
      }
    });

    // Add the cluster group to the map
    map.addLayer(markers);
  } catch (error) {
    console.error("Error fetching data:", error);
  }
}
	});
